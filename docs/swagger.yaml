basePath: /
definitions:
  app.CreateUserRequestDTO:
    properties:
      password:
        minLength: 1
        type: string
      username:
        type: string
    type: object
  app.GetAllMazesResponseDTO:
    properties:
      mazes:
        items:
          $ref: '#/definitions/app.MazeResponseDTO'
        type: array
    type: object
  app.IDResponseDTO:
    properties:
      id:
        type: integer
    type: object
  app.LoginCredentialsDTO:
    properties:
      password:
        minLength: 1
        type: string
      username:
        minLength: 1
        type: string
    required:
    - password
    - username
    type: object
  app.LoginResponseDTO:
    properties:
      token:
        type: string
    type: object
  app.MazeDTO:
    properties:
      entrance:
        type: string
      gridSize:
        type: string
      walls:
        items:
          type: string
        type: array
    type: object
  app.MazeResponseDTO:
    properties:
      entrance:
        type: string
      gridSize:
        type: string
      id:
        type: integer
      walls:
        items:
          type: string
        type: array
    type: object
  app.Message:
    properties:
      message:
        type: string
    type: object
  app.SolutionResponseDTO:
    properties:
      path:
        items:
          type: string
        type: array
    type: object
host: localhost:8080
info:
  contact:
    email: alexander.egurnov@gmail.com
    name: Alexander Egurnov
  description: This API allows to store and solve simple mazes
  title: Maze API
  version: "0.1"
paths:
  /login:
    post:
      consumes:
      - application/json
      description: Login with username and password, get a token to use for further
        operations.
      operationId: login
      parameters:
      - description: Login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/app.LoginCredentialsDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.LoginResponseDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/app.Message'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/app.Message'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/app.Message'
      summary: Login to the API
      tags:
      - Auth
  /maze:
    get:
      consumes:
      - application/json
      operationId: GetAllMazes
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.GetAllMazesResponseDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/app.Message'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/app.Message'
      security:
      - bearerAuth: []
      summary: Get all mazes belonging to the current user
      tags:
      - Maze
    post:
      consumes:
      - application/json
      operationId: CreateMaze
      parameters:
      - description: Maze description
        in: body
        name: maze
        required: true
        schema:
          $ref: '#/definitions/app.MazeDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/app.IDResponseDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/app.Message'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/app.Message'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/app.Message'
      security:
      - bearerAuth: []
      summary: Create a new maze
      tags:
      - Maze
  /maze/{id}:
    get:
      consumes:
      - application/json
      operationId: GetMaze
      parameters:
      - description: maze id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.MazeResponseDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/app.Message'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/app.Message'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/app.Message'
      security:
      - bearerAuth: []
      summary: Get one specific maze belonging to the current user
      tags:
      - Maze
  /maze/{id}/print:
    get:
      consumes:
      - application/json
      operationId: PrintMaze
      parameters:
      - description: maze id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - text/plain
      responses:
        "200":
          description: OK
          schema:
            items:
              type: integer
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/app.Message'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/app.Message'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/app.Message'
      security:
      - bearerAuth: []
      summary: Print one specific maze belonging to the current user
      tags:
      - Maze
  /maze/{id}/solution:
    get:
      consumes:
      - application/json
      operationId: SolveMaze
      parameters:
      - description: maze id
        in: path
        name: id
        required: true
        type: integer
      - description: Find shortest or longest path
        enum:
        - min
        - max
        in: query
        name: steps
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/app.SolutionResponseDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/app.Message'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/app.Message'
        "408":
          description: Request Timeout
          schema:
            $ref: '#/definitions/app.Message'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/app.Message'
      security:
      - bearerAuth: []
      summary: Solve a previously stored maze
      tags:
      - Maze
  /user:
    post:
      consumes:
      - application/json
      description: Provide a unique username and password to create a new user.
      operationId: CreateUser
      parameters:
      - description: New user credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/app.CreateUserRequestDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/app.IDResponseDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/app.Message'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/app.Message'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/app.Message'
      summary: Register a new user for the API
      tags:
      - Auth
schemes:
- http
securityDefinitions:
  bearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
